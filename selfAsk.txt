* 是否需要有分类（category）这样的组织方式
> 需要！使用目录来代表分类，允许有嵌套的分类。
* 是否需要友情链接
> 需要！友情链接写在配置文件或其它单独的文件中。
* 是否需要标签
> 标签在写完文章后利用程序提供的命令行选项进行添加，就像使用TaskWarrior的加标签的功能那样。
* 文章的标题从何而来？
> 直接使用文章对应的文件系统上的文件名
* 是否只用文章的标题来组织文章列表
> 使用文章标题、时间和标签来作为文章列表的一个项目。
* 页面使用什么布局
> 最上面是标题，左边是文章列表，右边是导航。典型的布局。
* 是否还要有按照时间组织文章的功能
> 太麻烦了，不要了。
* 是否要有about页面
> 感觉没什么必要，除非需要提供联系方式。
* 除了首页之外的页面要如何生成
> 因为没有about之类的页面，也就不需要生成了。
* 不管是about也好还是其它页面也好，都需要有一种生成它们并且在首页中提供相关的链接的方法。
* 程序负责的功能应该是哪些？
> 负责文章从源代码到目标HTML文件的生成，整个站点必要文件的更新。
* 既然源文件只含有作为内容的部分，那么具体的文章的页面要如何生成呢？
> 使用模板文件，目标HTML文件由模板经过填充生成。
* 那么是不是只要运行一个编写好的程序，然后上面所说的一切就可以自动完成呢？
> 如果只是生成文章和更新站点，是的。除了不输入任何参数进行文章的生成和首页的更新外，还可以在接收到参数的时候作出不同的响应。
* 那么程序至少要知道哪些源文件被修改过了对吧？
> 是的。不仅在配置文件和首页之间需要比较修改时间，在源文件和目标文件之间也需要比较修改时间。这个功能可以作为一个单独的模块进行编写。
* 是不是应该先划分一下功能模块，并看看有没有什么是可以直接复用的？
> 操作路径的部分很有可能会成为一个独立的模块来编写，包括更换路径的前缀、更换文件类型、提取其中的一部分等等。
* 似乎善用CL本身提供的路径操作函数的话也是可以完成很多功能的，那么还是从零开始编码慢慢积累实用工具更好吗？
> 感觉是这样的，尽管一开始可能编码比较冗长。
* 一个文章的页面应该包括哪些部分呢？
> 首先要继承首页的结构，即上方的标题和右边的导航栏（包括分类、标签和友情链接），左边是放置文章内容的地方。文章内容包括了正文和评论插件。标题由文章名字决定，这样方便从浏览器历史中找到文章，同时加上博客站点名字，同样为了方便查找。
* 应该按什么顺序来完成功能？
> 为单一的文章生成目标HTML文件（从配置文件读取数据（>只是自己用的就算把路径信息写在文件中没关系吧～█）->将Markdown字符串转换为HTML字符串->从源文件的路径名出发得到目标文件的路径名（将输入的路径信息扩展为完整的truename->更换前缀（取出后缀（取出从某个位置开始的相对路径）█->和另外的前缀进行拼接█）->更换后缀（取出前缀->和另外的后缀进行拼接）█）->将HTML内容填充到模板文件中以生成目标文件（确保所有需要的目录文件都存在（取出后缀->分解出目录->一级一级地建立目录（同时搜集分类信息存储到数据库中▁））█->决定模板文件的名称和存放位置█->决定模板文件的结构->将HTML元素组织成用于填充的格式->调用模板库填充功能（生成分类目录▁->生成标签▁->生成友情链接（读取配置文件中的信息█））））->利用记录的数据更新首页->自动寻找更新目标并进行更新（找出最后修改时间比对应的目标HTML文件还要晚的源文件->调用生成目标文件的功能进行处理->调用更新首页的功能）
* 每一篇文章的源文件，是否应该只包含表达内容的东西呢？
> 为了使得文章的生成尽量简单，以及在我熟悉的范围内将文章的内容、页面结构和样式分开处理，源文件按照约定只包含属于文章正文的部分。
* 你可以预见到的要自己编写的功能有哪些？
> 估计是所有处理路径名的功能，例如拆解路径名，变换路径名等等。
* 你要用什么语言来写呢？
> 首选是使用CommonLisp来编写。如果可能的话，就改成用OCaml和Haskll来进行编写。
